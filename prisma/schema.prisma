generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attendance {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  status     String   @db.VarChar(255)
  student_id String   @db.Uuid
  course_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  course     course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student    student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model course {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String         @db.VarChar(255)
  description     String?        @db.VarChar(255)
  user_id         String         @db.Uuid
  organization_id String         @db.Uuid
  status          String         @db.VarChar(255)
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  attendance      attendance[]
  organization    organization   @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student         student[]
  zoom_meeting    zoom_meeting[]
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  status      String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  course      course[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model student {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String       @db.VarChar(255)
  last_name  String       @db.VarChar(255)
  status     String       @db.VarChar(255)
  course_id  String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  attendance attendance[]
  course     course       @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  course       course[]
  organization organization[]
  zoom_meeting zoom_meeting[]
}

model zoom_meeting {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  meeting_link String   @db.VarChar(255)
  meeting_date DateTime @db.Date
  course_id    String   @db.Uuid
  user_id      String   @db.Uuid
  status       String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  course       course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
